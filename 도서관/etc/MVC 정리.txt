MVC
M : Model
V : View
C : Controller

MVC 패턴을 사용하는 이유
: 유지보수성, 확장성, 유연성 증가


Model
모든 데이터를 가지고 있음
view와 controller에 대해 전혀 몰라야 함(UI를 직접 수정하면 안되는 등)
변경이 일어나면, 변경 통지에 대한 처리방법을 구현해야 함
재사용이 가능해야 하며 다른 인터페이스에서도 변하지 않아야 함

View
모델일 가지고 있는 정보를 따로 저장하면 안됨(입, 출력만 담당)
model과 controller에 구성요소를 몰라야 함
변경이 일어나면 변경통지에 대한 구현을 해야 함

Controller
데이터와 UI의 사이를 잇는 다리역할
model이나 view에 대해 알고 있어야 함 -> model과 view는 서로의 존재를 모르고 변경에 대해 
수, 회신만 하는 구현만 있고 그것들을 Controller가 조정함
= 프로젝트의 메인 로직을 담당